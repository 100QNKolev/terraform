# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.

      - name: Download and install Terraform
        run: |
          # Download the latest version of Terraform for Linux (adjust for other OS if needed)
          curl -Lo terraform.zip https://releases.hashicorp.com/terraform/$(curl -s https://checkpoint-api.hashicorp.com/v1/check/terraform | jq -r -M .current_version)/terraform_$(curl -s https://checkpoint-api.hashicorp.com/v1/check/terraform | jq -r -M .current_version)_linux_amd64.zip

          # Unzip and install Terraform
          unzip terraform.zip
          sudo mv terraform /usr/local/bin/
          
          # Verify installation
          terraform version

      - name: Initialize Terraform working directory
        run: |
          cd ./
          terraform init

      - name: Creating initial files, loading remote state, and downloading modules
        run: |
          cd ./
          # Create initial Terraform files (e.g., main.tf, variables.tf, providers.tf)
          # Configure remote state if needed (e.g., terraform backend config)
          # Download Terraform modules using 'terraform get'
          terraform get

      - name: Check Terraform configuration files format
        run: |
          cd ./
          # Check that all Terraform configuration files adhere to a canonical format
          terraform fmt -recursive
          terraform fmt -check -recursive

      - name: Validate Terraform Files
        run: |
          cd ./
          terraform validate
